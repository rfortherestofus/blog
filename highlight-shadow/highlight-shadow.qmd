---
title: "Use shadows in ggplot to highlight findings"
author: David Keyes
date: 2024-11-09
toc: false
format: gfm
execute: 
  warning: false
  message: false
knitr:
  opts_chunk:
    collapse: true
    comment: "#>"
    dev: "ragg_png"
    dev.args: { scaling: 1 }
    dpi: 300
    out.width: 80%
    fig.asp: 0.56
editor_options: 
  chunk_output_type: console
---

## Intro

In our consulting work, we make a lot of the data visualization for [parameterized reporting](https://rfortherestofus.com/2024/06/parameterized-reporting-quarto). It's something I spoke about in my 2024 Cascadia R Conf talk, [How to Make a Thousand Plots Look Good: Data Viz Tips for Parameterized Reporting](https://cascadiarconf.org/2024/regular/david_keyes/). 

{{< video https://www.youtube.com/watch?v=ValvLQWYeEU >}}

One example I gave in this talk came from [our work with the Johns Hopkins International Vaccine Access Center and the World Health Organization](https://rfortherestofus.com/success-stories/ia2030). In this project, we made reports for the [Immunization Agenda 2030](https://www.immunizationagenda2030.org/) project, which tracks the progress countries around the world are making toward vaccination goals. 

One challenge we face when making parameterized reports like the ones we made for IA2030 is how to ensure that the focus of each report is highlighted. For example, we made this map, which shows the progress Afghanistan has made toward the eradication of rubella.

![](ia2030-region-map.png)

As you can see, we highlight Afghanistan in the map so that it is obvious to reader. We do this highlighting using a less conventional technique that you may not have considered: adding shadows. Using shadows to highlight findings can make a big impact on the quality of your maps and graphs, especially when doing parameterized reporting. Let's talk about how we do it.

## Import Our Data

The first step is to import our data. Let's begin by loading two packages: {tidyverse} for data wrangling and plotting with ggplot and {sf} for importing our geospatial data. 

```{r}
library(tidyverse)
library(sf)
```


```{r}
#| echo: false
#| eval: false
# rubella <- read_rds(here::here("highlight-shadow/rubella.rds"))
#
# rubella |>
#   mutate(status = as.character(status)) |>
#   st_write(here::here("highlight-shadow/rubella.geojson"))
```

I've posted a simplified version of the data we used to make these maps in [GeoJSON format](https://en.wikipedia.org/wiki/GeoJSON). The `read_sf()` function can import this file, which I save as `rubella`.

```{r}
rubella <-
  read_sf("https://github.com/rfortherestofus/blog/raw/refs/heads/main/highlight-shadow/rubella.geojson")
```

We can take a look at the data:

```{r}
rubella
```

As you can see, it is [geospatial data](https://book.rfortherestofus.com/maps.html#a-brief-primer-on-geospatial-data), which is why it has the metadata at the top. In addition to the `country` variable, `region` indicates whether the country is part of the region we're focusing on (1 if yes, 0 if no), and `status` shows each country's progress toward rubella eradication.

## Make the Basic Map

Let's begin by making a simple map. To do this, I'll separate the `rubella` objects into two pieces. First, I'll make a new object called `rubella_region_0` by filtering countries with `region` 0.

```{r}
rubella_region_0 <-
  rubella |>
  filter(region == 0)
```

If we plot this, we can see that countries with `region` 0 are those in the surrounding area, but not in the Eastern Mediterranean region, which we are focusing on. 

```{r}
ggplot() +
  geom_sf(
    data = rubella_region_0,
    fill = "grey90",
    color = "grey70",
    linewidth = 0.2
  )
```

We'll also create a `rubella_region_1` object. However, before doing this, let's take a look at the data, focusing on the `status` variable. Droping the geometry data with `st_drop_geometry()` before filtering our data and then counting `status`, we see that there are three unique observations in our data: Achieved, No data, and Not achieved. 

```{r}
rubella |>
  st_drop_geometry() |>
  filter(region == 1) |>
  count(status)
```

While countries in the Eastern Mediterranean region only have these statuses, we want to also show the status Re-established on our map legend. To do this, we use the `add_row()` function to manually add a row with `status` as Re-established. We then convert `status` into a factor so that the statuses will show up in the correct order in the legend. 

```{r}
rubella_region_1 <-
  rubella |>
  filter(region == 1) |>
  add_row(status = "Re-established") |>
  mutate(status = fct(
    status,
    levels = c(
      "Achieved",
      "Re-established",
      "Not achieved",
      "No data"
    )
  ))
```

We can run `count()` again on the `status` variable. Now we see that there is a single Re-established observation, sufficient to ensure it will show up in our legend.

```{r}
rubella_region_1 |>
  st_drop_geometry() |>
  count(status)
```

Let's make a simple map using `rubella_region_1`:

```{r}
ggplot() +
  geom_sf(
    data = rubella_region_1,
    aes(fill = status),
    linewidth = 0.2,
    color = "white",
    alpha = 1
  )
```

We can see the countries in the Eastern Mediterranean region, with each status in a different color.

Next, let's combine the two maps we made. Doing this will give us a map that shows both the Eastern Mediterranean countries as well as surrounding countries. 

```{r}
ggplot() +
  geom_sf(
    data = rubella_region_0,
    fill = "grey90",
    color = "grey70",
    linewidth = 0.2
  ) +
  geom_sf(
    data = rubella_region_1,
    aes(fill = status),
    linewidth = 0.2,
    color = "white"
  )
```

Let's adjust our colors now. Using `scale_fill_manual()` we specify the colors we want for each status.

```{r}
ggplot() +
  geom_sf(
    data = rubella_region_0,
    fill = "grey90",
    color = "grey70",
    linewidth = 0.2
  ) +
  geom_sf(
    data = rubella_region_1,
    aes(fill = status),
    linewidth = 0.2,
    color = "white"
  ) +
  scale_fill_manual(
    name = "",
    values = c(
      "Achieved" = "navy",
      "Re-established" = "gold1",
      "Not achieved" = "red2",
      "No data" = "grey80"
    )
  )
```

The last step in making our basic map is to adjust the theme. I use `theme_void()` to remove everything from our map, use the [Inter Tight font](https://fonts.google.com/specimen/Inter+Tight), and make some additional tweaks using the `theme()` function. 

```{r}
ggplot() +
  geom_sf(
    data = rubella_region_0,
    fill = "grey90",
    color = "grey70",
    linewidth = 0.2
  ) +
  geom_sf(
    data = rubella_region_1,
    aes(fill = status),
    linewidth = 0.2,
    color = "white"
  ) +
  scale_fill_manual(
    name = "",
    values = c(
      "Achieved" = "navy",
      "Re-established" = "gold1",
      "Not achieved" = "red2",
      "No data" = "grey80"
    )
  ) +
  theme_void(base_family = "Inter Tight") +
  theme(
    legend.text = element_text(
      size = 12,
      color = "grey40"
    ),
    plot.margin = margin(rep(20, 4)),
    legend.position = "bottom"
  )
```

Our plot is looking pretty decent at this point!

### Turn Our Basic Map into a Function

Before adding shadows for highlighting, I'm going to turn the code I've created to make a basic map into a function. It's as simple as wrapping the code above in a function called `region_map()`:

```{r}
region_map <- function() {
  ggplot() +
    geom_sf(
      data = rubella_region_0,
      fill = "grey90",
      color = "grey70",
      linewidth = 0.2
    ) +
    geom_sf(
      data = rubella_region_1,
      aes(fill = status),
      linewidth = 0.2,
      color = "white"
    ) +
    scale_fill_manual(
      name = "",
      values = c(
        "Achieved" = "navy",
        "Re-established" = "gold1",
        "Not achieved" = "red2",
        "No data" = "grey80"
      )
    ) +
    theme_void(base_family = "Inter Tight") +
    theme(
      legend.text = element_text(
        size = 12,
        color = "grey40"
      ),
      plot.margin = margin(rep(20, 4)),
      legend.position = "bottom"
    )
}
```

Now, I simply run `region_map()` and I get my basic map.

```{r}
region_map()
```

## Add Shadow to Highlight

Now that we've got a function to make a basic map, we can add a shadow behind any country in order to highlight it. To do this, we first load the [{ggfx} package](http://ggfx.data-imaginist.com). 

```{r}
library(ggfx)
```

This package has a number of functions to tweak your plots. I'm going to use the `with_shadow()` function. This function, which you wrap around any geom, will add a shadow. Here you can see that I'm wrapping it around `geom_sf()`, which I'm using to plot Afghanistan on the map. The arguments in `with_shadow()` adjust the appearance of the shadow: `x_offset` and `y_offset` determine how far the shadow will be from the geom while `sigma` determines the level of blurring. With options set for each argument, we can now see a shadow added to Afghanistan.

```{r}
region_map() +
  with_shadow(
    geom_sf(
      data = rubella |> filter(country == "Afghanistan"),
      aes(fill = status),
    ),
    sigma = 0,
    x_offset = 4,
    y_offset = 4
  )
```

When we use shadows to highlight, we don't typically *just* add shadows. One additional thing we often do is add an outline. Using the lines `linewidth = 0.8` and `color = "white` we create a white outline around Afghanistan, which makes it even easier to pick out. 

```{r}
region_map() +
  with_shadow(
    geom_sf(
      data = rubella |> filter(country == "Afghanistan"),
      aes(fill = status),
      linewidth = 0.8,
      color = "white"
    ),
    sigma = 0,
    x_offset = 4,
    y_offset = 4
  )
```

Afghanistan is more and more obvious, but there's one more thing we can do: adjust the opacity of the background map to make the highlight country pop even more. We do this by adding an argument to our `region_map()` function. The `opacity_level` argument applies to the geom made with `rubella_region_1`. 

```{r}
region_map <- function(opacity_level = 1) {
  ggplot() +
    geom_sf(
      data = rubella_region_0,
      fill = "grey90",
      color = "grey70",
      linewidth = 0.2
    ) +
    geom_sf(
      data = rubella_region_1,
      aes(fill = status),
      linewidth = 0.2,
      color = "white",
      alpha = opacity_level
    ) +
    scale_fill_manual(
      name = "",
      values = c(
        "Achieved" = "navy",
        "Re-established" = "gold1",
        "Not achieved" = "red2",
        "No data" = "grey80"
      )
    ) +
    theme_void(base_family = "Inter Tight") +
    theme(
      legend.text = element_text(
        size = 12,
        color = "grey40"
      ),
      plot.margin = margin(rep(20, 4)),
      legend.position = "bottom"
    )
}
```

To show you what this looks like, let's run this code: 

```{r}
region_map(opacity_level = 0.25)
```

As you can see, the countries in the Eastern Mediterranean region are faded. Now, 25% opacity, as I did above, is probably a bit too much. Instead, let's set our opacity to 75% (0.75) and see how it looks with Afghanistan added.  

```{r}
region_map(opacity_level = 0.75) +
  with_shadow(
    geom_sf(
      data = rubella |> filter(country == "Afghanistan"),
      aes(fill = status),
      linewidth = 0.8,
      color = "white"
    ),
    sigma = 0,
    x_offset = 4,
    y_offset = 4
  )
```

Looks great! For someone just flipping through the Afghanistan report, they'll be able to easily pick out Afghanistan, which is exactly what we want.

In this blog post, I've given an example of using the `with_shadow()` function to highlight a country on a map, but it can work with any geom. Try it next time you want to highlight a bar, line, or anything else you might create with ggplot!
