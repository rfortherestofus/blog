---
title: "Refugees animation"
author: David Keyes
date: 11/27/2024
toc: false
format: gfm
wrap: none
execute: 
  warning: false
  message: false
knitr:
  opts_chunk:
    out.width: 100%
    fig.height: 8
    dpi: 300
    collapse: true
    comment: "#>"
    warning: false
    message: false
editor_options: 
  chunk_output_type: console
---

## Data {.hidden}

```{r}
#| echo: false
#| eval: false

# This code chunk is where I import the data, but I'm not showing it in the blog post

library(tidyverse)
library(refugees)
library(wbstats)
library(rnaturalearth)
library(here)
library(sf)

refugees <-
  population |>
  rename(country_abbreviation = coo_iso) |>
  group_by(year, country_abbreviation) |>
  summarise(number_of_refugees = sum(refugees, na.rm = TRUE)) |>
  ungroup() |>
  filter(year >= 2000) |>
  arrange(country_abbreviation)

country_population <-
  wb_data("SP.POP.TOTL", start_date = 2000, end_date = 2023) |>
  select(date, iso3c, SP.POP.TOTL) |>
  set_names("year", "country_abbreviation", "total_population") |>
  labelled::remove_var_label()

refugees_data <-
  refugees |>
  left_join(
    country_population,
    join_by(year, country_abbreviation)
  ) |>
  mutate(refugees_as_pct = number_of_refugees / total_population) |>
  select(year, country_abbreviation, refugees_as_pct) |>
  complete(year, country_abbreviation) |>
  arrange(desc(refugees_as_pct))

refugees_data |>
  write_rds(here("gganimate/refugees_data.rds"))

countries_data <-
  ne_countries() |>
  select(iso_a3, continent, subregion) |>
  rename(country_abbreviation = iso_a3) |> 
  filter(country_abbreviation != "-99")

countries_data |>
  st_write(
    here("gganimate/countries_data.geojson"),
    driver = "GeoJSON",
    delete_dsn = TRUE
  )
```


The {gganimate} package is the easiest way to make animated plots in R. If you know how to make plots in ggplot, you can animate them with {gganimate}. Animated plots are a great way to capture attention, especially online where the next shiny object is just a scroll away. If you want to get attention on your data, using animation with a package like {gganimate} is a great option. 

In this blog post, I'll show how to use the {gganimate} package by animating data on refugees. As part of our [one percent for people, one percent for the planet giving program](https://rfortherestofus.com/1percent), we regularly support the work of the United Nations High Commissioner for Refugees (UNHCR). If you want to learn more about how the UNHCR uses R, please see our interviews with UNHCR statistician [Ahmadou Dicko](https://youtu.be/CN6FVID5ydU) and information management officer CÃ©dric Vidonne. TODO: Add link

## Import Data

To show how {gganimate} works, let's use data from UNHCR. [Their {refugees} package](https://www.unhcr.org/refugee-statistics/insights/explainers/refugees-r-package.html) has data on a number of different datasets related to refugee populations. I'll use one of these datasets, called `population`, which has "data on forcibly displaced and stateless persons by year, including refugees, asylum-seekers, internally displaced people (IDPs) and stateless people." 

I begin by loading the {refugees} package:

```{r}
library(refugees)
```

And then showing the `population` data:

```{r}
population
```

This dataset has more variables than we need. I've done some work to calculate the refugee population from each country as a percentage of its total population in all years since 2000 (you can see the code for that [here](https://github.com/rfortherestofus/blog/blob/main/gganimate/gganimate.qmd)). To see the data that I end up with, I'll load the {tidyverse}:

```{r}
library(tidyverse)
```

Next, I'll import the data I've created and saved as an RDS file:

```{r}
refugees_data <-
  read_rds("https://github.com/rfortherestofus/blog/raw/refs/heads/main/gganimate/refugees_data.rds")
```

We can take a look at the `refugees_data` tibble we now have to work with:

```{r}
refugees_data
```

I've sorted the data to show the single year and country with the highest percentage of refugees as a proportion of the total population. As you can see, Syria (with the country abbreviation SYR) has the top 9 observations, a result of its [decade-plus civil war](https://www.cfr.org/article/syrias-civil-war).

## Make an Animated Plot

We're now ready to plot our data. I'll load a few more packages: {scales} to give me nicely formatted axis text, {hrbrthemes} for its lovely ggplot themes, and {gganimate}.

```{r}
library(scales)
library(hrbrthemes)
library(gganimate)
```

First, we can make a basic chart from our data. We filter to only show Syria and then make a line chart with `geom_line()`. We make some aesthetic tweaks: the `percent_format()` function give us nicely formatted percentages on the y axis and `theme_ipsum_inter()` makes our plot look good overall. 

```{r}
refugees_data |>
  filter(country_abbreviation == "SYR") |>
  ggplot(
    aes(
      x = year,
      y = refugees_as_pct
    )
  ) +
  geom_line() +
  scale_y_continuous(
    labels = percent_format()
  ) +
  labs(
    x = NULL,
    y = NULL,
    title = "The refugee population in Syria increased\ndramatically as a result of its civil war"
  ) +
  theme_ipsum_inter(base_size = 12) +
  theme(panel.grid.minor = element_blank())
```

We then save this plot as `syria_refugees_plot`. 

```{r}
#| echo: false
syria_refugees_plot <- last_plot()
```

Now, in order to animate the plot, we take the `syria_refugees_plot` object and add a transition to it. The {gganimate} package has [multiple transitions](https://gganimate.com/reference/index.html#transitions). Which one you use depends on the type of data you are working with as well as how you want to animate it. Here, I've used `transition_reveal(year)`, which tells {gganimate} to sequentially reveal the data, year by year. The result is an animated plot that shows the dramatic rise in the Syrian refugee population starting in 2011. 

```{r}
syria_refugees_plot +
  transition_reveal(year)
```

## Make an Animated Map

The {gganimate} package works with any type of data. You can even use it when making maps. To demonstrate this, I'll begin by loading the {sf} package. 

```{r}
library(sf)
```

This package gives me access to the `read_sf()` function, which I use to import geospatial data on all countries. 

```{r}
countries_data <-
  read_sf("https://github.com/rfortherestofus/blog/raw/refs/heads/main/gganimate/countries_data.geojson")
```

Taking a look at the `countries_data` object, we can see it has a `country_abbreviation` column, as well as `continent` and `subregion`.

```{r}
countries_data
```

Next, I'm going to join this `countries_data` object with the `refugees_data` object we created above. I'll then filter to only include countries in the subregion Western Asia and rearrange columns with `select()`.

```{r}
middle_east_refugees_data <-
  countries_data |>
  left_join(
    refugees_data,
    join_by(country_abbreviation)
  ) |>
  filter(subregion == "Western Asia") |>
  select(year, country_abbreviation, refugees_as_pct)
```

This gives me geospatial data on refugees in the Middle East. 

```{r}
middle_east_refugees_data
```

I can now use this data to make a map. The `geom_sf()` function plots my data and I use the `fill` aesthetic to make the shading of each country different depending on the value in the `refugees_as_pct` variable. 

```{r}
#| echo: true
#| output: false
middle_east_refugees_data |>
  ggplot() +
  geom_sf(
    aes(fill = refugees_as_pct),
    linewidth = 0.1,
    color = "white"
  ) +
  scale_fill_viridis_c(
    labels = percent_format(),
    limits = c(0, .4),
    option = "C",
    guide = guide_colorsteps(show.limits = TRUE)
  ) +
  labs(
    title = "Refugees as a percentage of total population",
    fill = NULL
  ) +
  theme_ipsum_inter(
    grid = FALSE
  ) +
  theme(
    legend.position = "top",
    plot.title = element_text(
      face = "bold",
      hjust = 0.5
    ),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    legend.key.width = unit(2, "cm"),
    legend.text = element_text(
      size = 12
    )
  )
```

The result, though, isn't quite what we expect:

```{r}
#| echo: false
middle_east_refugees_map <- last_plot()

middle_east_refugees_map
```

That's because the data is longitudinal. That is, we have multiple years for each year, meaning earlier years are covering up later ones. To see what is going on, let's make a small multiples chart. I've saved the previous plot as `middle_east_refugees_map`. If I add a `facet_wrap()` onto it, I can see the data for each year. 

```{r}
#| fig-height: 10
middle_east_refugees_map +
  facet_wrap(vars(year))
```

This plot allows us to see how the earlier data from 2000 is covering up later years, making it appear that no countries have refugees. 

Making a facetted chart like this is actually quite instructive about how {gganimate} works. Specifically, it takes the variable that you use to animate on, creates one plot for each unique observation of that variable, and then puts each plot together, one after the other, kind of like an old [flipbook](https://en.wikipedia.org/wiki/Flip_book). If we add `transition_manual(year)` (this works with our geospatial data) to `middle_east_refugees_map`, you can see the animated result.

```{r}
middle_east_refugees_map +
  transition_manual(year)
```

One difficult thing about the animated map we've just made is that we can't see the year on display as the shading changes. To add this, we can use the `{current_frame}` syntax provided by {gganimate}, adjusting our title as follows:

```{r}
#| output: false
#| echo: true
middle_east_refugees_map +
  labs(title = "Refugees as a percentage of total population in {current_frame}") +
  transition_manual(year)
```

The resulting map will show `{current_frame}` replaced by the year, meaning your title is animated alongside the map itself. 

```{r}
#| echo: false
middle_east_refugees_map +
  labs(title = "Refugees as a percentage of total population in {current_frame}") +
  transition_manual(year)
```

I've only covered the surface here; the {gganimate} package has a [lot of additional functions](https://gganimate.com/reference/index.html) to tweak your animations. Hopefully this introduction to {gganimate} will inspire you to check them out!