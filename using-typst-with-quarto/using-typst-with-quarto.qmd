---
title: Using typst and Quarto
---

## What is Typst

Typst is a modern language made to generate PDFs. In short, it's a successor to LaTeX, but with some very important differences:

- It's much simpler to use
- You can easily [add logic](https://typst.app/docs/reference/scripting/) (think of `if`/`for` statements, create functions, define variables, etc)
- It's super fast: you can generate reports almost instantly

And it's fully supported by Quarto.

## Using typst in Quarto

If you want to create a PDF using Typst from Quarto, all you have to do is put this in the YAML header of your Quarto file:

```yaml
title: "Hello Typst!"
format: typst
````

Then the rest of your document will be converted to PDF when rendering.

Quarto also offers you the option to customize the output file. For example:

```yaml
title: "Hello Typst!"
format:
  typst:
    toc: true                  # add a table of contents
    section-numbering: 1.1.a   # format for section numbering
    columns: 2                 # number of columns in the paper
```

You can learn more about available options [here](https://quarto.org/docs/output-formats/typst.html). But with those options we are limited in customization options.

If we want to have full control over the output, we need to create a Typst template.

## Typst templates

A Typst template is just a function that takes arguments such as a title, a list of authors or anything else we want.

Creating a Typst template allows us to modify a large number of styling options that we couldn't otherwise.

For this, we need to create 2 Typst files (they have a `.typ` extension):

* `typst-show.typ`: file that takes parameters from Quarto and passes them to the template
* `typst-template.typ`: file that contains our template function

Our YAML should now look like this:

```yaml
title: "Hello typst"
format:
   typst:
      template-partials:
         - typst-template.typ
         - typst-show.typ
```

Our project should be organized as such:

```
my_project/
├── report.qmd          # Quarto document
├── typst-show.typ      # Layer between Quarto and Typst
└── typst-template.typ  # Function of the template
```

Ok now let's create a simple template.

First we define an `article()` function, which is actually a Typst template. It has 2 arguments:

* `title`: The title of the document, with a default value
* `body`: All the content of the document (e.g., everything from our Quarto document)

```{.typ filename="typst-template.typ"}
#let article(
  title: "Default title",
  body,
) = {
  align(center)[#text(size: 30pt, weight: "bold", title)]

  body
}
```

Then, we call that `article()` function from `typst-show.typ` and pass the arguments from Quarto. For example here, it checks if there is a `title` parameter in the Quarto YAML, and if so, it passes it to the `article()` function.

The `body` argument here is all the content from our Quarto document (texts, charts, code snippets, etc).

```{.typ filename="typst-show.typ"}
#show: body => article(
  $if(title)$
    title: [$title$],
  $endif$
    body,
)
```

Assuming our Quarto document looks like this:

````{.qmd filename="report.qmd"}
---
title: "Hello typst"
format:
   typst:
      template-partials:
         - typst-template.typ
         - typst-show.typ
---

# Hello world

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do

```{{r}}
library(tidyverse)

iris |>
    ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
    geom_point()
```
````

The rendered PDF will look like this:

![](example-1.png)

We just made our very first Typst template and used it with Quarto!

Now let's dive into customizations.

## Customization of a Typst template

### Passing more parameters from Quarto to Typst

First of all, let's see how to pass any parameters from Quarto to the Typst template. Let's add an `author` parameter in our YAML:

```yaml
title: "Hello typst"
author: "Someone Fun"
format:
   typst:
      template-partials:
         - typst-template.typ
         - typst-show.typ
```

Then, we update our `typst-show.typ` file:

```{.typ filename="typst-show.typ"}
#show: body => article(
  $if(title)$
    title: [$title$],
  $endif$
  $if(author)$
    author: [$author$],
  $endif$
    body,
)
```

And then the `typst-template.typ` file:

```{.typ filename="typst-template.typ"}
#let article(
  title: "Default title",
  author: "unknown",
  body,
) = {
  align(center)[#text(size: 30pt, weight: "bold", title)]

  "The author is " + author

  body
}
```

This leads to:

![](example-2.png)

#### Example of a footer using `set` rules

Now instead of just displaying the author name, let's put it in the footer of **every page**.

For this, we need to use the `page()` function from Typst and set the `footer` argument.

Our template function now looks like this:

```{.typ filename="typst-template.typ"}
#let article(
  title: "Default title",
  author: "unknown",
  body,
) = {
  set page(footer: { author })

  align(center)[#text(size: 30pt, weight: "bold", title)]

  body
}
```

![](example-3.png)

Here something very important happens: we use what is called `set rules`.

`set rules` follow this pattern: you call `set` with the name of a function whose behavior you wish to set. This will then change **globally** the style of all elements that rely on this function.

For example, if I write:

```typ
set text(font: "New Computer Modern")
```

All core texts will now use the "New Computer Modern" font unless another font is specified.

Using `set` changes the default behavior of a function, and that's what we did with `set page(footer: { author })`. We told Typst that all page footers should have `author` (which is an argument we passed from Quarto) in their footer.

Takeaways about `set rules`:

* With `set rules`, we can control the behavior of a lot of things: text style, tables, headings, headers and footers, and many more
* This is one of the primary ways to customize the style of your report
* The difference between writing `set page(...)` and `page()` is that:

  * `page(...)` adds a page to the report
  * `set page(...)` changes the behavior of how `page(...)` works

#### Columns

Columns are something not well supported with Quarto yet. But we can approximate the behavior by using `layout` instead.

With a Quarto document that looks like this:

````qmd
---
title: "Hello typst"
format:
   typst:
      template-partials:
         - typst-template.typ
         - typst-show.typ
execute:
  echo: false
---

::: {layout="[[1,1], [1]]"}
```{{r}}
print("Top left cell")
```

```{{r}}
print("Top right cell")
```

```{{r}}
print("Bottom cell")
```
:::
````

![](example-4.png)

This will not be detailed in depth here as **this isn't specific to Typst**. You can learn more about it [here](https://quarto.org/docs/authoring/figures.html).

#### Background color in a section

Let's now see a bit more advanced usage of Typst: coloring a section with a specific background color.

For this we need to use a core Typst function: `block`. Let's see a concrete example:

```{.typ filename="typst-template.typ"}
#let article(
  title: "Default title",
  author: "unknown",
  body,
) = {
  set page(footer: {
    align(
      center + horizon, // center both vertically and horizontally
      block(
        width: 135%,
        height: 30pt,
        fill: rgb("#fec3c3"),
        text(size: 15pt, author)
      )
    )
  })

  align(center)[#text(size: 30pt, weight: "bold", title)]

  body
}
```

![](example-5.png)

Here we set the footer in a different way: instead of just setting the `author` variable inside the footer, we do multiple things.

* Set the text inside a `block()` of color "#fec3c3", a height of 30pt and a 135% width. Note that the width must be over 100% to be able to grow over margins
* Set the block inside an `align()` to center it horizontally (`center`) and vertically (`horizon`)

Now, what if you want to set a custom background color for a specific section and not necessarily the footer? We just need to define a function, and then reuse it anytime we want.

We update our template with this:

```{.typ filename="typst-template.typ"}
#let pink-background(
  content,
) = {
  align(center, block(width: 135%, height: 30pt, fill: rgb("#fec3c3"), align(horizon, text(
    size: 15pt,
    content,
  ))))
}

#let article(
  title: "Default title",
  author: "unknown",
  body,
) = {
  align(center)[#text(size: 30pt, weight: "bold", title)]

  pink-background(author)
  pink-background(author)
  pink-background(author)

  body
}
```

And the Quarto document becomes:

````qmd
---
title: "Hello typst"
author: "Someone Fun"
format:
   typst:
      template-partials:
         - typst-template.typ
         - typst-show.typ
execute:
  echo: false
---

# Hello world

Lorem ipsum

```{=typst} 
#pink-background("hello from Quarto")
```
````

![](example-6.png)

Important things here:

- We defined a `pink-background()` function in Typst
- We're able to use that function **both** in Typst and in Quarto
- To write "raw Typst" in Quarto you need to set the code chunck language to "`=typst`"

## Workflow

In order to work comfortably with Typst and Quarto, you need to have a good editor and extensions. Here are the recommendations:

- Use either VS Code or Positron (RStudio does not support typst as well as those two)
- Install the following VSCode/Positron extensions:
  - [Typst LSP](https://open-vsx.org/extension/nvarner/typst-lsp)
  - [Tinymist Typst](https://open-vsx.org/extension/myriad-dreamin/tinymist)
  - [vscode-pdf](https://open-vsx.org/extension/tomoki1207/pdf)

You will have a language server (get function definitions, autocomplete, etc directly from the editor) and a code formatter (make sure your code is clean everytime you save.)

## What's next?

Now that you have the overwiew of how to work with Quarto and Typst, the next step is to learn more about Typst.

There is a great [documentation website](https://typst.app/docs/), a large community and a [forum](https://forum.typst.app/) where you can ask questions.

Typst is not fundamentally hard, but you need to spend some time working with it and reading the documentation. Also note that LLMs such as ChatGPT are **pretty bad** at Typst so it's advised to not rely on them too much.
