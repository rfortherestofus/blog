---
title: Connect variables between R and Typst
---

## Typst & Quarto

This blog post is the 3rd of a blog post series on Typst and Quarto. Check out the first two if you have not already:

- [Introduction to Typst with Quarto](#)
- [Customization in Typst and Quarto](#)

Here we will explain:

* how to connect variables between R and Typst
* and how to make your reports dynamic

## Pass variables from R to Typst

Let's start with a simple Typst:

```{.typ filename="typst-template.typ"}
#let article(
  title: none,
  date: none,
  body,
) = {
  align(center)[#text(size: 30pt, title)]
  align(right)[#date]

  body
}

Here we define an `article()` function with three arguments:

* `title`: defaults to none
* `date`: defaults to none
* `body`: no default, because it represents all the content from our Quarto document (charts, code, markdown content, etc.)

`typst-show.typ` should look like this:

```{.typ filename="typst-show.typ"}
#show: body => article(
  title: [$title$],
  date: [$date$],
  body,
)
```

Here we are just "calling" our `article()` function from the template file.

Then, our Quarto document should explicitly mention these files with the `template-partials` flag:

````md
---
title: Hello Typst!
date: September 2025
format:
   typst:
      template-partials: 
         - typst-show.typ
         - typst-template.typ
---

## Section A

Lorem Ipsum is simply dummy text of the printing and typesetting industry.
````

![](example-1.png)

What if we want to add an author parameter? We just have to add it as an argument of our Typst template:

```{.typ filename="typst-template.typ"}
#let article(
  title: none,
  date: none,
  author: none,
  body,
) = {
  align(center)[#text(size: 30pt, title)]
  align(right)[#date]
  align(right)[Author: #author]

  body
}
```

```{.typ filename="typst-show.typ"}
#show: body => article(
  title: [$title$],
  date: [$date$],
  author: [$author$],
  body,
)
```

````md
---
title: Hello Typst!
date: September 2025
author: Julia
format:
   typst:
      template-partials: 
         - typst-show.typ
         - typst-template.typ
---

## Section A

Lorem Ipsum is simply dummy text of the printing and typesetting industry.
````

![](example-2.png)

## Change output depending on the value of the parameter

Right now, no matter the author name, it will display `Author: *author*`.

But since Typst has scripting capabilities (think of `if`/`for` statements, etc.), we can handle special cases easily.

Here, we will add `"(founder)"` after the author name if the author is Julia, nothing otherwise. The only thing we need to change is how we handle the author parameter input in our Typst template:

```{.typ filename="typst-template.typ"}
#let article(
  title: none,
  date: none,
  author: none,
  body,
) = {
  let full_author = if author.text == "Julia" {
    author + " (founder)"
  } else {
    author
  }

  align(center)[#text(size: 30pt, title)]
  align(right)[#date]
  align(right)[Author: #full_author]

  body
}
```

Now, depending on whether we write `author: Antonio` or `author: Julia` at the top of our Quarto document, we will get different results:

:::: {.columns}

::: {.column width="50%"}
![](./example-3.png)
:::

::: {.column width="50%"}
![](./example-4.png)
:::

::::

This example is just about changing a text string, but this can work with much more: different images, different positioning, different alignments, etc.

For example, if we have a `state` parameter that is supposed to be a U.S. state, we could dynamically display the state flag with the following code (assuming we have the flag images):

```typ
let state_flag = "assets/flags/" + state + ".svg"
#image(state_flag, height: 0.7in)
```

## Define and reuse functions

In Typst, we can define a function that makes it super easy to reuse a styling block.

For example, let's say we want in our report a highly styled text, but we don't want to define its style multiple times.

First, we define a `cool-label()` function with the style we want. It only needs to accept a string argument:

```typ
#let cool-label(string) = {
  align(center)[#box(
    fill: rgb("#fa9e35"),
    inset: 12pt,
    align(center + horizon)[#text(string, style: "italic", font: "Bitter", size: 24pt, fill: white)],
  )]
}

#let article(
  title: none,
  date: none,
  body,
) = {
  align(center)[#text(size: 30pt, title)]
  align(right)[#date]

  body
}
```

We can now call `cool-label()` inside our Quarto document:

````md
---
title: Hello Typst!
date: September 2025
format:
   typst:
      template-partials: 
         - typst-show.typ
         - typst-template.typ
---

Lorem Ipsum is simply dummy text of the printing and typesetting industry.

```{=typst}
#cool-label("Hello world")
```

Lorem Ipsum is simply dummy text of the printing and typesetting industry.

```{=typst}
#cool-label("14%")
```
````

![](./example-6.png)

This allows us to easily separate the styling logic from the content of the report.

## Dynamic content in Typst

Our `cool-label()` calls here hardcode their input, in the sense that we literally write the value of the input.

But what if we want this value to be passed from R? This would ensure we do not write the wrong thing and remove any manual work.

That is possible with a specific Quarto syntax that evaluates our input dynamically:

````md
---
title: Hello Typst!
date: September 2025
format:
   typst:
      template-partials: 
         - typst-show.typ
         - typst-template.typ
---

Lorem Ipsum is simply dummy text of the printing and typesetting industry.

```{{r}}
values <- c(12, 15, 35, 6)
avg <- mean(values)
```

```{=typst}
#cool-label("`r avg`")
#cool-label("The average is `r avg`%")
```
````

![](./example-7.png)

## Real world example

If you would like to see concrete, real-life examples of how Quarto + Typst + R are used, [check out the vaccination reports produced for John Hopkins](https://github.com/claritydatastudio/state-immunization-reports/).

## Tips for a good development workflow

In order to work comfortably with Typst and Quarto, you need to have a good editor and extensions. Here are the recommendations:

- Use either VS Code or Positron (RStudio does not support typst as well as those two)
- Install the following VSCode/Positron extensions:
  - [Typst LSP](https://open-vsx.org/extension/nvarner/typst-lsp)
  - [Tinymist Typst](https://open-vsx.org/extension/myriad-dreamin/tinymist)
  - [vscode-pdf](https://open-vsx.org/extension/tomoki1207/pdf)

You will have a language server (get function definitions, autocomplete, etc directly from the editor) and a code formatter (make sure your code is clean everytime you save.)

## What's next?

Now that you have the overwiew of how to work with Quarto and Typst, the next step is to learn more about Typst.

There is a great [documentation website](https://typst.app/docs/), a large community and a [forum](https://forum.typst.app/) where you can ask questions.

Typst is not fundamentally hard, but you need to spend some time working with it and reading the documentation. Also note that LLMs such as ChatGPT are **pretty bad** at Typst so it's advised to not rely on them too much.