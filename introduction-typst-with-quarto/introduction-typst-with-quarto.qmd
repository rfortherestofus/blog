---
title: Introduction to typst and Quarto
---

## What is Typst

Typst is a modern language made to generate PDFs. In short, it's a successor to LaTeX, but with some very important differences:

* Its syntax is much lighter and flexible
* You can easily [add logic](https://typst.app/docs/reference/scripting/) (think of `if`/`for` statements, create functions, define variables, etc)
* It's super fast: you can generate reports almost instantly

And it's fully supported by Quarto.

## Using typst in Quarto

If you want to create a PDF using Typst from Quarto, all you have to do is put this in the YAML header of your Quarto file:

```yaml
title: "Hello Typst!"
format: typst
```

Then the rest of your document will be converted to PDF, using typst, when rendering.

Quarto also gives you the option to customize the output file. For example:

```yaml
title: "Hello Typst!"
format:
  typst:
    toc: true                  # add a table of contents
    section-numbering: 1.1.a   # format for section numbering
    columns: 2                 # number of columns in the paper
    margin:                    # control margins 
      x: 1.25in
      y: 1.25in
```

You can learn more about available options [here](https://quarto.org/docs/output-formats/typst.html). But with those options we are limited in customization.

If we want to have **more control over the style**, we need to write Typst code, and it's probably simpler than you think.

## Writing typst: `set` rules is all you need

The easiest way to customize a typst report is to use `set` rules. `set` rules change the behavior of a given typst function. Let's take an example.

If I write:

```typ
#set text(font: "Roboto")
```

This will change **all text** to use the Roboto font. Now if I write:

```typ
#set text(font: "Roboto", fill: red)
```

It will change all text font and make text red.

By default, all text in typst is black and uses the “libertinus” font (similar to "Times New Roman"). But thanks to the `set` rules, we can change this default behavior to achieve the desired style.

This works because in typst `text()` is the function used to write text. That also means it works with all arguments inside the `text()` function. For instance, you can find them [here](https://typst.app/docs/reference/text/text/).

Now, how do we write typst code in Quarto? We need to include a typst code block like this:

````md
---
title: "Hello Typst!"
format: typst
---

```{=typst}
#set text(font: "Roboto", fill: red)
```

## Section A

Lorem Ipsum is simply dummy text of the printing and typesetting industry.
````



Here we used an example with the `text()` function and just two of its arguments. But this works with many other things: headings, tables, footers and headers, lists, and many more.

Now let's say we want to change how bullet points look. For this, we need to use a `set` rule on the `list()` function.

We change the default marker to be three horizontal triangles:

````md
---
title: "Hello Typst!"
format: typst
---

```{=typst}
#set text(font: "Roboto", fill: red)
#set list(marker: "‣‣‣")
```

## Section A

Lorem Ipsum is simply dummy text of the printing and typesetting industry.

- first bullet point
- second bullet point
- last bullet point
````

![](example-2.png)

`set` rules are very powerful and very easy to use. Very often you'll only need them to achieve what you want.

A good workflow is to check in the [typst documentation](https://typst.app/docs/) the name of the function you want to change (such as `text()`, `list()`, etc) and see what arguments (and to which value) you should change.

## What's next?

Now that you have the overview of how to work with Quarto and Typst, the next step is to learn how to create [Typst templates](#).
